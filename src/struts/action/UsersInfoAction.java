/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package struts.action;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.upload.FormFile;

import server.BegRentServer;
import server.LeaseRoomServer;
import server.UserInfoServer;
import server.UserServer;
import server.impl.BegRentServerImpl;
import server.impl.LeaseRoomServerImpl;
import server.impl.UserInfoServerImpl;
import server.impl.UserServerImpl;
import struts.form.UsersInfoForm;
import bean.BegRentBean;
import bean.LeaseRoomBean;
import entity.LeaseRoom;
import entity.Users;
import entity.UsersInfo;

/**
 * MyEclipse Struts Creation date: 06-26-2010
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/usersInfo" name="usersInfoForm"
 *                input="/form/usersInfo.jsp" parameter="method" scope="request"
 *                validate="true"
 */
public class UsersInfoAction extends DispatchAction {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws IOException
	 * @throws IOException
	 * @throws InvocationTargetException
	 * @throws IllegalAccessException
	 */
	public ActionForward AddUsersinfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws IOException, IllegalAccessException,
			InvocationTargetException {
		UsersInfoForm usersInfoForm = (UsersInfoForm) form;

		UserServer userver = new UserServerImpl();
		UserInfoServer infoServer = new UserInfoServerImpl();
		PrintWriter out = response.getWriter();

		UsersInfo usersInfo = null;

		int uid = usersInfoForm.getUid();

		 

		boolean isinfo = false;
		 
		Users user = userver.getUser(uid); // 加载当前用户基本信息（users 表）

		UsersInfo uinfo = user.getInfo();// 加载当前用户详细信息(usersInfo 表)
		// 判断当前用户是否有详细信息
		if (uinfo == null) { // 为null,没有详细信息
			usersInfo = new UsersInfo();
			BeanUtils.copyProperties(usersInfo, usersInfoForm); // 复制JavaBean

			usersInfo.setUsers(user);
			String fileNmae = uploadImg(form, request, response);
			usersInfo.setImage(fileNmae);
			isinfo = infoServer.add(usersInfo); // 新的详细信息，调用添加方法

		} else { // 当前用户有详细信息
			String file=uinfo.getImage();   //原图片
			BeanUtils.copyProperties(uinfo, usersInfoForm); // 复制JavaBean
			String fileName = uploadImg(form, request, response);
			System.out.println("fileName:"+fileName);
			System.out.println("file:"+file);
            if(!fileName.equals("")){
            	uinfo.setImage(fileName);
            }else{
            	uinfo.setImage(file);
            } 
			isinfo = infoServer.update(uinfo);// 调用修改方法
		}

		// 判断用户基本信息是否有所修改
		if (!user.getPhone().equals(usersInfoForm.getPhone())
				|| !user.getEmail().equals(usersInfoForm.getEmail())) {
			BeanUtils.copyProperties(user, usersInfoForm); // 复制JavaBean
			userver.update(user);
		}

		if (isinfo) {
			Users users = userver.getUser(uid); // 加载当前用户基本信息（users 表）
			request.getSession().setAttribute("users", users);
			out.print("<script>");
			out.print("alert('保存成功!!!');");
			out.print("window.location='user.jsp';");
			out.print("</script>");
			return null;
		} else {
			out.print("<script>");
			out.print("alert('保存失败!!!');");
			out.print("window.history.go(-1);");
			out.print("</script>");
		}

		return null;
	}

	public String uploadImg(ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws FileNotFoundException,
			IOException { // 上传
		UsersInfoForm usersInfoForm = (UsersInfoForm) form;
		FormFile file = usersInfoForm.getImage();
		String fileName = file.getFileName();
		if (!fileName.equals("")) {
			String path = this.servlet.getServletContext().getRealPath(
					"/uploadIMG");

			byte[] data = file.getFileData();
			int size = file.getFileSize();
			File uploadFile = new File(path + "\\" + fileName);
			// 创建文件输出流
			FileOutputStream outputStream = new FileOutputStream(uploadFile);
			outputStream.write(data);
		}
		return fileName;

	}

	public ActionForward selectUsersinfo(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) { // 查询
		UsersInfoForm usersInfoForm = (UsersInfoForm) form;

		UserInfoServer infoServer = new UserInfoServerImpl();
		List<UsersInfo> infolist = infoServer.select();
		request.setAttribute("infolist", infolist);
		return mapping.findForward("select");

	}

	// 获得用户房源的信息
	public ActionForward roomInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		LeaseRoomServer lserver = new LeaseRoomServerImpl();
		BegRentServer bserver = new BegRentServerImpl();

		int uid = ((Users) request.getSession().getAttribute("users")).getUid(); // 获得当前用户id

		LeaseRoomBean lbean = new LeaseRoomBean();
		lbean.setIslist("nolist");
		lbean.setUid(uid);

		int lcount = lserver.getByPage(1, 1, lbean).getAllCount(); // 获得当前用户所发布的出租房源数

		BegRentBean bean = new BegRentBean();
		bean.setIslist("nolist");
		bean.setUid(uid);

		int bcount = bserver.selectBegRentByPage(1, 1,bean).getAllCount();// 获得当前用户所发布的求租房源数

		request.setAttribute("lcount", lcount);
		request.setAttribute("bcount", bcount);
		request.setAttribute("isinfo", "ok");
		getCookie(request, response);// 获得用户浏览过的房源信息
		return mapping.findForward("user");

	}

	// 获得用户浏览过的房源信息
	public void getCookie(HttpServletRequest request,
			HttpServletResponse response) {
		LeaseRoomServer server = new LeaseRoomServerImpl();
		int uid = ((Users) request.getSession().getAttribute("users")).getUid();// 获得当前登录用户id
		String cookieName = "roomList" + uid; // cookie名
		Cookie cookies[] = request.getCookies();

		if (cookies != null) {
			Cookie cookie = null;
			for (Cookie c : cookies) {
				if (c.getName().equals(cookieName)) {
					cookie = c;
					break;
				}
			}
			if (cookie != null) {
				String strs[] = cookie.getValue().split(",");// 获得每一个房源id并存入数组
				List<LeaseRoom> cookieRoom = new ArrayList<LeaseRoom>();
				for (String str : strs) {
					// 加载房源信息
					LeaseRoom room = server.getRoom(Integer.parseInt(str));
					// 存入list集合
					if (room != null) {
						cookieRoom.add(room);
					}
				}
				request.setAttribute("cookieRoom", cookieRoom);
			}
		}

	}
}